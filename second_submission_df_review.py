# -*- coding: utf-8 -*-
"""second_submission_df_review.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z_k4os_1QWQI1MWuz07QjGoIflh2-QYt
"""

try:
  from google.colab import drive
  IN_COLAB=True
except:
  IN_COLAB=False

if IN_COLAB:
  print("We're running Colab")

# Commented out IPython magic to ensure Python compatibility.
if IN_COLAB:
  # Mount the Google Drive at mount
  mount='/content/gdrive'
  print("Colab: mounting Google drive on ", mount)

  drive.mount(mount)

  # Switch to the directory on the Google Drive that you want to use
  import os
  drive_root = mount + "/My Drive/Thesis/Code/Descriptives"
  
  # Create drive_root if it doesn't exist
  create_drive_root = True
  if create_drive_root:
    print("\nColab: making sure ", drive_root, " exists.")
    os.makedirs(drive_root, exist_ok=True)
  
  # Change to the directory
  print("\nColab: Changing directory to ", drive_root)
#   %cd $drive_root

import pandas as pd
import numpy as np

df_1949 = pd.read_csv("/content/gdrive/My Drive/Thesis/Code/Pre-processing/Processed1949.csv")
df_2000 = pd.read_csv("/content/gdrive/My Drive/Thesis/Code/Pre-processing/Processed2000.csv")

print(len(df_1949))
print(len(df_2000))

length_1949 = len(df_1949)
length_2000 = len(df_2000)

print("amount of tokens present 1949:", (length_1949 * 5))
print("amount of tokens present 2000:", (length_2000 * 5))

# Convert a dataframe to the list of rows i.e. list of lists
List_1949 = df_1949.to_numpy().tolist()

List_2000 = df_2000.to_numpy().tolist()

#loading the name data
#Processing the name dataset
    
with open('/content/gdrive/My Drive/Thesis/Data/Overig/1000Names.txt', 'r') as fp:
    nameslist = fp.readlines()
    
names = []
for name in nameslist:
    new = name.replace(",", "")
    new2 = new.replace("\n", "")
    new3 = new2.lower()
    new4 = new3.rstrip()
    new5 = new4.lstrip()
    new6 = new5.replace("'", "")
    names.append(new6)
    

print(len(names))

with open('/content/gdrive/My Drive/Thesis/Data/Overig/Dolgopolsky.txt', 'r') as fp:
    dolgolist = fp.readlines()
    
dolgopolsky_list = []
for dol in dolgolist:
    new = dol.replace(",", "")
    new2 = new.replace("\n", "")
    new3 = new2.lower()
    new4 = new3.rstrip()
    new5 = new4.lstrip()
    new6 = new5.replace("'", "")
    dolgopolsky_list.append(new6)
    

print(len(dolgopolsky_list))

running_text_1949 = []
for listje in List_1949:
    new_list = []
    words = listje[0].split(" ")
    new_list.append(words)
    running_text_1949.append(words)

running_text_2000 = []
for listje in List_2000:
    new_list = []
    words = listje[0].split(" ")
    new_list.append(words)
    running_text_2000.append(words)

print(List_1949[0])
print(running_text_1949[0])

present_names_49 = []
name_frequencies_49 = {}
everything_counter_49 = {}
present_words_49 = []
dolgo_frequencies_49 = {}
unique_name_sent49 = []
unique_name_sent_len_49 = []
total_length49 = []

for i in running_text_1949:
  lengthtotal = len(i)
  total_length49.append(lengthtotal)
  for word in i:
    
    present_words_49.append(word)
    if word in everything_counter_49:
      everything_counter_49[word] += 1
    else:
      everything_counter_49[word] = 1
    if word in names:
      present_names_49.append(word)
      uniq_set = [word, i]
      if uniq_set in unique_name_sent49:
        pass
      else:
        length = len(i)
        unique_name_sent_len_49.append(length)
        unique_name_sent49.append(uniq_set)
        unique_name_sent49.append(uniq_set)
      if word in name_frequencies_49:
        name_frequencies_49[word] += 1
      else:
        name_frequencies_49[word] = 1
    if word in dolgopolsky_list:
      if word in dolgo_frequencies_49:
        dolgo_frequencies_49[word] += 1
      else:
        dolgo_frequencies_49[word] = 1

unique_name_sent49

unique_name_sent

total_freqs_all = list(everything_counter_49.values())
print(total_freqs_all)
print(len(total_freqs_all))

unique_sent_dict49 = {}

for y in unique_name_sent49:
  name = y[0]
  sent = y[1]
  if name in unique_sent_dict49:
    unique_sent_dict49[name] += 1
  else:
    unique_sent_dict49[name] = 1

unique_sent_dict49

dolgo_frequencies_49

sorted_values = sorted(everything_counter_49.values()) # Sort the values
sorted_dict = {}

for i in sorted_values:
    for k in everything_counter_49.keys():
        if everything_counter_49[k] == i:
            sorted_dict[k] = everything_counter_49[k]
            break

print(sorted_dict)

with open('/content/gdrive/My Drive/Thesis/Data/Overig/Dolgopolsky.txt', 'r') as fp:
    dolgolist = fp.readlines()
    
dolgopolsky_list = []
for dol in dolgolist:
    new = dol.replace(",", "")
    new2 = new.replace("\n", "")
    new3 = new2.lower()
    new4 = new3.rstrip()
    new5 = new4.lstrip()
    new6 = new5.replace("'", "")
    dolgopolsky_list.append(new6)
    

print(len(dolgopolsky_list))

present_names_20 = []
name_frequencies_20 = {}
everything_counter_20 = {}
present_words_20 = []
dolgo_frequencies_20 = {}
unique_name_sent = []
unique_name_sent_len = []
total_length = []

for i in running_text_2000:
  lengthtotal = len(i)
  total_length.append(lengthtotal)
  for word in i:
    present_words_20.append(word)
    if word in everything_counter_20:
      everything_counter_20[word] += 1
    else:
      everything_counter_20[word] = 1

    if word in names:
      present_names_20.append(word)
      uniq_set = [word, i]
      if uniq_set in unique_name_sent:
        pass
      else:
        length = len(i)
        unique_name_sent_len.append(length)
        unique_name_sent.append(uniq_set)
      if word in name_frequencies_20:
        name_frequencies_20[word] += 1
      else:
        name_frequencies_20[word] = 1
    if word in dolgopolsky_list:
      if word in dolgo_frequencies_20:
        dolgo_frequencies_20[word] += 1
      else:
        dolgo_frequencies_20[word] = 1

unique_name_sent_lenarr = np.array(unique_name_sent_len)
avg_name_len = np.mean(unique_name_sent_lenarr)
print(avg_name_len)

total_lengtharr = np.array(total_length)
avg_lenght = np.mean(total_lengtharr)
print(avg_lenght)

indexs = list(range(0, len(unique_sent_dict)))

unique_sent_dict = {}

for y in unique_name_sent:
  name = y[0]
  sent = y[1]
  if name in unique_sent_dict:
    unique_sent_dict[name] += 1
  else:
    unique_sent_dict[name] = 1

unique_sent_dict

dolgo_frequencies_20

values_49 = list(everything_counter_49.values())
values_array_49 = np.array(values_49)
avg_49 = np.mean(values_array_49)
print("Average token frequency all words 1949:", round(avg_49,2))

values_20 = list(everything_counter_20.values())
values_array_20 = np.array(values_20)
avg_20 = np.mean(values_array_20)
print("Average token frequency all words 2000:", round(avg_20,2))

name_values_49 = list(name_frequencies_49.values())
name_array_49 = np.array(name_values_49)
avg_name_49 = np.mean(name_array_49)
print("Average name frequency all names 1949:", round(avg_name_49, 2))

name_values_20 = list(name_frequencies_20.values())
name_array_20 = np.array(name_values_20)
avg_name_20 = np.mean(name_array_20)
print("Average name frequency all names 2000:", round(avg_name_20, 2))

present_words_49_unique = list(set(present_words_49))
present_words_20_unique = list(set(present_words_20))

counter = 0
for word in present_words_49:
  if word in present_words_20:
    counter += 1

counter

print(len(present_words_49))
print(len(present_words_20))
print("--" * 30)
print(len(present_words_49_unique))
print(len(present_words_20_unique))
print("--" * 30)
print(len(set(present_words_49_unique) & set(present_words_20_unique)))
print("--" * 30)
print(len(set(present_words_49) & set(present_words_20)))

sorted_values = sorted(everything_counter_20.values()) # Sort the values
sorted_dict_20 = {}

for i in sorted_values:
    for k in everything_counter_20.keys():
        if everything_counter_20[k] == i:
            sorted_dict_20[k] = everything_counter_20[k]
            break

print(sorted_dict_20)

print(len(present_names_49))
print(len(present_names_20))

counter2 = 0

for name in present_names_49:
  if name in present_names_20:
    counter2 += 1

counter2

present_names_49_unique = list(set(present_names_49))
present_names_20_unique = list(set(present_names_20))

for name in present_names_49_unique:
  if name in present_names_20_unique:
    firstprint = name_frequencies_49[name]
    secondprint = name_frequencies_20[name]
    totalprint = [name, [firstprint, secondprint]]
    print(totalprint)

print(len(present_names_49_unique))
print(len(present_names_20_unique))
print("---"*100)
print(len(present_names_49))
print(len(present_names_20))

len(set(present_names_20_unique) & set(present_names_49_unique))



print(set(present_names_49_unique) & set(present_names_20_unique))

#Make graphs and tables:
#name_frequencies_49
#name_frequencies_20

#Total frequencies of names:

all_val_49 = list(name_frequencies_49.values())
all_val_20 = list(name_frequencies_20.values())

array_all_val_49 = np.array(all_val_49)
array_all_val_20 = np.array(all_val_20)

sum_all_val_49 = np.sum(array_all_val_49)
sum_all_val_20 = np.sum(array_all_val_20)
total_sum = sum_all_val_49 + sum_all_val_20

listcounter49 = list(everything_counter_49.values())
listcounter20 = list(everything_counter_20.values())

arraycounter49 = np.array(listcounter49)
arraycounter20 = np.array(listcounter20)

totalcounter49 = np.sum(arraycounter49)
totalcounter20 = np.sum(arraycounter20)

totalfreq = totalcounter49 + totalcounter20

namesperc = (total_sum / totalfreq * 100)
namesperc49 = (sum_all_val_49 / totalcounter49 * 100)
namesperc20 = (sum_all_val_20 / totalcounter20 * 100)


print("Total frequencies:",  totalfreq)
print("Total name frequencies:",total_sum)
print("Percentage of names:", round(namesperc,3 ), "%")
print("--" * 20)
print("Total frequencies in 1949:", totalcounter49)
print("Total frequencies in 2000:", totalcounter20)
print("Name frequencies in 1949:", sum_all_val_49)
print("Name frequencies in 2000:", sum_all_val_20)
print("Percentage of names 1949:", round(namesperc49,3), "%")
print("Percentage of names 2000:", round(namesperc20,3), "%")



listcounter49 = list(everything_counter_49.values())
listcounter20 = list(everything_counter_20.values())

arraycounter49 = np.array(listcounter49)
arraycounter20 = np.array(listcounter20)

totalcounter49 = np.sum(arraycounter49)
totalcounter20 = np.sum(arraycounter20)

totalfreq = totalcounter49 + totalcounter20

